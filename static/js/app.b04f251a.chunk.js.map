{"version":3,"sources":["src/components/BaseScreen.tsx","src/screens/FeedOverviewScreen.tsx","src/hooks/useRSSReader.ts","src/utils/sortListbyDateDesc.ts","src/hooks/useFavorites.ts","src/utils/storage/storage.ts","src/screens/FeedScreen.tsx","src/screens/FeedDetailsScreen.tsx","src/screens/FavoriteScreen.tsx","src/navigators/RootNavigator.tsx","webpack:////Users/marius/Development/RSSViewer/index.js?1f11","src/App.tsx"],"names":["BaseScreen","props","children","SafeAreaView","style","container","justifyContent","alignItems","height","width","padding","flex","backgroundColor","feeds","FeedOverviewScreen","navigate","useNavigation","FlatList","data","keyExtractor","item","ItemSeparatorComponent","View","renderItem","info","onPress","feedURL","borderWidth","borderColor","borderRadius","Text","useRSSReader","React","useState","feedEntries","setFeedEntries","feedInfo","setFeedInfo","isLoading","setIsLoading","isError","setIsError","useEffect","length","urlPrefix","Platform","OS","fetch","then","response","text","responseData","rssParser","rss","title","list","eventuallyUnsortedItems","items","map","it","entry","date","published","description","url","links","find","link","substr","sort","a","b","Date","getTime","catch","e","finally","useFavorites","favItems","setFavItems","key","async","AsyncStorage","getItem","almostThere","JSON","parse","load","persistedItems","console","warn","value","setItem","stringify","log","addFavItem","FeedScreen","route","setOptions","params","ActivityIndicator","color","size","i","TouchableOpacity","feedEntryURL","Linking","openURL","onLongPress","TITLE","marginBottom","stylesheet","p","DESCRIPTION","DATE","fontSize","fontWeight","FeedDetailsScreen","uri","source","onError","startInLoadingState","FavoriteScreen","ListEmptyComponent","Stack","createStackNavigator","RootNavigator","Navigator","screenOptions","headerShown","headerRight","Screen","name","component","options","undefined","FavHeader","registerRootComponent","initialMetrics","initialWindowMetrics","NavigationContainer"],"mappings":"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","file":"static/js/app.b04f251a.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\n\ninterface IBaseScreenProps {\n  children: React.ReactNode;\n}\n\nexport interface INavScreenProps<T> {\n  route: {\n    key: string;\n    name: string;\n    params?: T;\n  };\n}\n\nexport const BaseScreen = (props: IBaseScreenProps) => {\n  const { children } = props;\n\n  return <SafeAreaView style={[container]}>{children}</SafeAreaView>;\n};\n\nconst container: ViewStyle = {\n  justifyContent: \"flex-start\",\n  alignItems: \"stretch\",\n  height: \"100%\",\n  width: \"100%\",\n  padding: 16,\n  flex: 1,\n  backgroundColor: '#fff'\n};\n","import { useNavigation } from \"@react-navigation/core\";\nimport React from \"react\";\nimport { FlatList, Text, View } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { BaseScreen, INavScreenProps } from \"../components/BaseScreen\";\n\nconst feeds = [\n  \"https://medium.com/feed/@reime005\",\n  \"https://hnrss.org/newest?q=ReactNative\",\n  \"https://www.reddit.com/.rss\",\n  \"http://www.nasa.gov/rss/dyn/breaking_news.rss\",\n];\n\ninterface IFeedOverviewScreenProps {}\n\nexport const FeedOverviewScreen = (\n  props: INavScreenProps<IFeedOverviewScreenProps>\n) => {\n  const { navigate } = useNavigation();\n\n  return (\n    <BaseScreen>\n      <FlatList\n        data={feeds}\n        keyExtractor={(item) => item}\n        ItemSeparatorComponent={() => <View style={{ height: 16 }} />}\n        renderItem={(info) => {\n          const onPress = () => {\n            navigate(\"Feed\", { feedURL: info.item });\n          };\n          return (\n            <TouchableOpacity\n              onPress={onPress}\n              style={{\n                padding: 24,\n                backgroundColor: \"#fff\",\n                borderWidth: 2,\n                borderColor: \"#ccc\",\n                borderRadius: 24,\n              }}\n            >\n              <Text>{info.item}</Text>\n            </TouchableOpacity>\n          );\n        }}\n      />\n    </BaseScreen>\n  );\n};\n","import React from \"react\";\n\nimport { Platform } from \"react-native\";\n\nimport * as rssParser from \"react-native-rss-parser\";\nimport { sortListbyDateDesc } from \"../utils/sortListbyDateDesc\";\n\nconst CORS_PROXY = \"https://peaceful-escarpment-39895.herokuapp.com/\";\n\ninterface IFeedInfo {\n  title: string;\n}\n\nexport interface IFeedEntry {\n  title: string;\n  description: string;\n  url: string;\n  date: string;\n}\n\nexport const useRSSReader = (feedURL?: string) => {\n  // TODO: debounce\n\n  const [feedEntries, setFeedEntries] = React.useState<IFeedEntry[] | null>(\n    null\n  );\n  const [feedInfo, setFeedInfo] = React.useState<IFeedInfo | null>(null);\n\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isError, setIsError] = React.useState(false);\n\n  React.useEffect(() => {\n    if (typeof feedURL !== \"string\" || feedURL.length < 1) {\n      // TODO: incorrect URL\n      return;\n    }\n\n    const urlPrefix = Platform.OS === \"web\" ? CORS_PROXY : \"\";\n\n    setIsLoading(true);\n\n    fetch(urlPrefix + feedURL)\n      .then((response) => response.text())\n      .then((responseData) => rssParser.parse(responseData))\n      .then((rss) => {\n        setFeedInfo({ title: rss.title });\n\n        const eventuallyUnsortedItems = rss.items.map((it) => {\n          const entry: IFeedEntry = {\n            date: it.published,\n            description: it.description ?? \"\",\n            title: it.title,\n            url:\n              it.links.find((link) => typeof link.url === \"string\")?.url ?? \"\",\n          };\n\n          return {\n            ...entry,\n            description: entry.description.substr(0, 130),\n          };\n        });\n\n        setFeedEntries(sortListbyDateDesc(eventuallyUnsortedItems));\n      })\n      .catch((e) => {\n        setIsError(e);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [feedURL]);\n\n  return { feedEntries, feedInfo, isLoading, isError };\n};\n","interface Item {\n  date: string;\n}\n\nexport function sortListbyDateDesc<T extends Item>(list: T[]): T[] {\n  return [...list].sort((a, b) => {\n    return new Date(b.date).getTime() - new Date(a.date).getTime();\n  });\n}\n","import React from \"react\";\nimport { load, save } from \"../utils/storage/storage\";\nimport { IFeedEntry } from \"./useRSSReader\";\n\nexport const useFavorites = () => {\n  const [favItems, setFavItems] = React.useState<IFeedEntry[]>([]);\n\n  const addFavItem = (item: IFeedEntry) => {\n    setFavItems([...favItems, item]);\n  };\n\n  React.useEffect(() => {\n    load(\"FAVORITES\")\n      .then((persistedItems) => {\n        setFavItems(persistedItems ?? []);\n      })\n      .catch((e) => console.warn(e));\n  }, []);\n\n  React.useEffect(() => {\n    //not the best approach to save the list on every change...\n    save(\"FAVORITES\", favItems)\n      .then(() => console.log(\"saved favorite\"))\n      .catch((e) => console.warn(e));\n  }, [favItems]);\n\n  return {\n    favItems,\n    addFavItem,\n  };\n};\n","import { AsyncStorage } from './async-storage';\nimport { STORAGE_OBJECT_KEYS, STORAGE_STRING_KEYS } from './storageTypes';\n\n/**\n * Loads a string from storage.\n *\n * @param key The key to fetch.\n */\nexport async function loadString(\n  key: STORAGE_STRING_KEYS,\n): Promise<string | null> {\n  try {\n    return await AsyncStorage.getItem(key);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Saves a string to storage.\n *\n * @param key The key to fetch.\n * @param value The value to store.\n */\nexport async function saveString(\n  key: STORAGE_STRING_KEYS,\n  value: string,\n): Promise<boolean> {\n  try {\n    await AsyncStorage.setItem(key, value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Loads something from storage and runs it thru JSON.parse.\n *\n * @param key The key to fetch.\n */\nexport async function load(key: STORAGE_OBJECT_KEYS): Promise<any | null> {\n  try {\n    const almostThere = await AsyncStorage.getItem(key);\n\n    if (!almostThere) {\n      return null;\n    }\n\n    return JSON.parse(almostThere);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Saves an object to storage.\n *\n * @param key The key to fetch.\n * @param value The value to store.\n */\nexport async function save(\n  key: STORAGE_OBJECT_KEYS,\n  value: any,\n): Promise<boolean> {\n  try {\n    await AsyncStorage.setItem(key, JSON.stringify(value));\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Removes something from storage.\n *\n * @param key The key to kill.\n */\nexport async function remove(key: STORAGE_OBJECT_KEYS): Promise<void> {\n  try {\n    await AsyncStorage.removeItem(key);\n  } catch {}\n}\n\n/**\n * Burn it all to the ground.\n */\nexport async function clear(): Promise<void> {\n  try {\n    await AsyncStorage.clear();\n  } catch {}\n}\n","import React from \"react\";\nimport {\n  ActivityIndicator,\n  FlatList,\n  Linking,\n  Platform,\n  Text,\n  TextStyle,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\n\nimport { BaseScreen, INavScreenProps } from \"../components/BaseScreen\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport { IFeedDetailsScreenProps } from \"./FeedDetailsScreen\";\nimport { useRSSReader, IFeedEntry } from \"../hooks/useRSSReader\";\nimport HTMLView from \"react-native-htmlview\";\nimport { useFavorites } from \"../hooks/useFavorites\";\n\nexport interface IFeedScreenProps {\n  feedURL: string;\n}\n\nexport const FeedScreen = (props: INavScreenProps<IFeedScreenProps>) => {\n  const { route } = props;\n\n  const { navigate, setOptions } = useNavigation();\n  const { feedEntries, feedInfo, isError, isLoading } = useRSSReader(\n    route.params?.feedURL\n  );\n  const { favItems, addFavItem } = useFavorites();\n\n  React.useEffect(() => {\n    if (typeof feedInfo?.title === \"string\") {\n      setOptions({ title: feedInfo.title });\n    }\n  }, [feedInfo]);\n\n  if (isError) {\n    return (\n      <BaseScreen>\n        <Text>There was an error, please try again.</Text>\n      </BaseScreen>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <BaseScreen>\n        <View\n          style={{\n            flex: 1,\n            justifyContent: \"space-around\",\n            alignItems: \"center\",\n          }}\n        >\n          <Text>loading feed....</Text>\n          <ActivityIndicator color=\"#000\" size=\"large\" />\n        </View>\n      </BaseScreen>\n    );\n  }\n\n  return (\n    <BaseScreen>\n      <FlatList\n        data={feedEntries}\n        keyExtractor={(item, i) => `${i}-${item.title}`}\n        ItemSeparatorComponent={() => <View style={{ height: 16 }} />}\n        renderItem={(info) => {\n          const onPress = () => {\n            if (Platform.OS === \"web\") {\n              Linking.openURL(info.item.url);\n              return;\n            }\n\n            navigate(\"FeedDetails\", {\n              feedEntryURL: info.item.url,\n            } as IFeedDetailsScreenProps);\n          };\n\n          return (\n            <TouchableOpacity\n              onPress={onPress}\n              onLongPress={() => addFavItem(info.item)}\n              style={{\n                padding: 24,\n                backgroundColor: \"#fff\",\n                borderWidth: 2,\n                borderColor: \"#ccc\",\n                borderRadius: 24,\n              }}\n            >\n              <Text style={TITLE}>{info.item?.title}</Text>\n\n              <HTMLView\n                value={info.item?.description}\n                style={{ marginBottom: 8 }}\n                stylesheet={{ p: DESCRIPTION, a: DESCRIPTION }}\n              />\n\n              <Text style={DATE}>{info.item?.date}</Text>\n            </TouchableOpacity>\n          );\n        }}\n      />\n    </BaseScreen>\n  );\n};\n\nexport const TITLE: TextStyle = {\n  fontSize: 16,\n  fontWeight: \"bold\",\n  marginBottom: 8,\n};\n\nexport const DESCRIPTION: TextStyle = {\n  fontSize: 14,\n  marginBottom: 8,\n};\n\nexport const DATE: TextStyle = {\n  ...DESCRIPTION,\n  color: \"#747474\",\n  marginBottom: 0,\n};\n","import React from \"react\";\nimport { View, Text, ActivityIndicator, Platform } from \"react-native\";\nimport { WebView } from \"react-native-webview\";\nimport { BaseScreen, INavScreenProps } from \"../components/BaseScreen\";\n\nexport interface IFeedDetailsScreenProps {\n  feedEntryURL: string;\n}\n\nexport const FeedDetailsScreen = (\n  props: INavScreenProps<IFeedDetailsScreenProps>\n) => {\n  const [isError, setIsError] = React.useState(false);\n\n  const uri = props.route.params?.feedEntryURL;\n\n  if (typeof uri !== \"string\") {\n    // TODO: error\n    console.warn(\"wrong uri\");\n    return null;\n  }\n\n  if (isError) {\n    return (\n      <BaseScreen>\n        <Text>There was an error, please try again.</Text>\n      </BaseScreen>\n    );\n  }\n\n  // if (Platform.OS === \"web\") {\n  //   return (\n  //     <iframe\n  //       src={uri}\n  //       referrerPolicy=\"no-referrer\"\n  //       style={{ flex: 1 }}\n  //       width=\"100%\"\n  //       height=\"100%\"\n  //     />\n  //   );\n  // }\n\n  return (\n    <View style={{ flex: 1 }}>\n      <>\n        <WebView\n          source={{\n            uri,\n          }}\n          onError={() => {\n            setIsError(true);\n          }}\n          startInLoadingState\n          style={{ flex: 1 }}\n        />\n      </>\n    </View>\n  );\n};\n","import { useNavigation } from \"@react-navigation/core\";\nimport React from \"react\";\nimport {\n  View,\n  Text,\n  ActivityIndicator,\n  Platform,\n  FlatList,\n  Linking,\n  TouchableOpacity,\n  TextStyle,\n} from \"react-native\";\nimport HTMLView from \"react-native-htmlview\";\nimport { BaseScreen, INavScreenProps } from \"../components/BaseScreen\";\nimport { useFavorites } from \"../hooks/useFavorites\";\nimport { IFeedDetailsScreenProps } from \"./FeedDetailsScreen\";\nimport { TITLE, DATE, DESCRIPTION } from \"./FeedScreen\";\n\nexport const FavoriteScreen = () => {\n  const { favItems } = useFavorites();\n  const { navigate } = useNavigation();\n\n  return (\n    <BaseScreen>\n      <FlatList\n        data={favItems}\n        ListEmptyComponent={() => <Text>No favorites found.</Text>}\n        keyExtractor={(item, i) => `${i}-${item.title}`}\n        ItemSeparatorComponent={() => <View style={{ height: 16 }} />}\n        renderItem={(info) => {\n          const onPress = () => {\n            if (Platform.OS === \"web\") {\n              Linking.openURL(info.item.url);\n              return;\n            }\n\n            navigate(\"FeedDetails\", {\n              feedEntryURL: info.item.url,\n            } as IFeedDetailsScreenProps);\n          };\n\n          return (\n            <TouchableOpacity\n              onPress={onPress}\n              style={{\n                padding: 24,\n                backgroundColor: \"#fff\",\n                borderWidth: 2,\n                borderColor: \"#ccc\",\n                borderRadius: 24,\n              }}\n            >\n              <Text style={TITLE}>{info.item?.title}</Text>\n\n              <HTMLView\n                value={info.item?.description}\n                style={{ marginBottom: 8 }}\n                stylesheet={{ p: DESCRIPTION, a: DESCRIPTION }}\n              />\n\n              <Text style={DATE}>{info.item?.date}</Text>\n            </TouchableOpacity>\n          );\n        }}\n      />\n    </BaseScreen>\n  );\n};\n","/**\n * The root navigator is used to switch between major navigation flows of your app.\n * Generally speaking, it will contain an auth flow (registration, login, forgot password)\n * and a \"main\" flow (which is contained in your MainNavigator) which the user\n * will use once logged in.\n */\nimport React from \"react\";\nimport {\n  NavigationContainer,\n  NavigationContainerRef,\n  useNavigation,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { FeedOverviewScreen } from \"../screens/FeedOverviewScreen\";\nimport { FeedScreen } from \"../screens/FeedScreen\";\nimport { FeedDetailsScreen } from \"../screens/FeedDetailsScreen\";\nimport { FavoriteScreen } from \"../screens/FavoriteScreen\";\nimport { Text, TouchableOpacity } from \"react-native\";\n\n/**\n * This type allows TypeScript to know what routes are defined in this navigator\n * as well as what properties (if any) they might take when navigating to them.\n *\n * We recommend using MobX-State-Tree store(s) to handle state rather than navigation params.\n *\n * For more information, see this documentation:\n *   https://reactnavigation.org/docs/params/\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\n */\nexport type RootParamList = {\n  FeedOverview: undefined;\n  Feed: undefined;\n  FeedDetails: undefined;\n  Favorite: undefined;\n};\n\nconst Stack = createStackNavigator<RootParamList>();\n\nexport const RootNavigator = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        title: \"RSS Feed List\",\n        headerShown: true,\n        headerRight: () => <FavHeader />,\n      }}\n    >\n      <Stack.Screen\n        name=\"FeedOverview\"\n        component={FeedOverviewScreen}\n        options={{\n          title: \"RSS Feed List\",\n        }}\n      />\n\n      <Stack.Screen\n        name=\"Favorite\"\n        component={FavoriteScreen}\n        options={{\n          title: \"RSS Favorite List\",\n        }}\n      />\n\n      <Stack.Screen name=\"Feed\" component={FeedScreen} options={{}} />\n\n      <Stack.Screen\n        name=\"FeedDetails\"\n        component={FeedDetailsScreen}\n        options={{\n          title: \"\",\n          headerRight: undefined,\n        }}\n      />\n    </Stack.Navigator>\n  );\n};\n\nconst FavHeader = () => {\n  const { navigate } = useNavigation();\n\n  return (\n    <TouchableOpacity\n      style={{\n        padding: 8,\n      }}\n      onPress={() => {\n        navigate(\"Favorite\");\n      }}\n    >\n      <Text>❤️</Text>\n    </TouchableOpacity>\n  );\n};\n","import { registerRootComponent } from 'expo';\n\nimport App from './src/App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport {\n  initialWindowMetrics,\n  SafeAreaProvider,\n} from \"react-native-safe-area-context\";\nimport { RootNavigator } from \"./navigators/RootNavigator\";\n\nexport default function App() {\n\n  // TODO: error boundary\n  return (\n    <SafeAreaProvider initialMetrics={initialWindowMetrics} >\n      <NavigationContainer>\n        <RootNavigator />\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n"],"sourceRoot":""}